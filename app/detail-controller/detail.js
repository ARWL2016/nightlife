/**
 * The detailCtrl controls the template which displays 
 * information about individual search results.
 * This page is linked to dynamically from the search 
 * results and makes an API call  to getDetails on initialization.
 * 
 * @prop vm.date - the date string selected (from next 7 days) in the add to diary widget
 * @prop vm.dates - an array of dates generated by the datetimeHelperService to populate the select element
 * @prop vm.hour - the hour string selected by the user in the diary widget 
 * @prop vm.hours - an array of hours, e.g. ['1.00', '2.00' ...]
 * @prop placeid - unique googleapi id associated with a location 
 * 
 * @function getDetails - runs automatically when template is linked to from search results; this makes two 
 * calls to the googleAPI: see server/api/get-details and server/api/getphoto
 * @function addToDiary - allows the user to save an 'event' - a location with a time and date 
 */

'use strict';

function DetailCtrl (
  $routeParams, 
  datetimeHelperService, 
  diaryService,
  googleApiService, 
  helperService,
  localStorageService 
) {
  var vm = this;

  vm.added = false;
  vm.amPm = 'PM';
  vm.date = 'today';
  vm.dates;
  vm.diaryBtnLabel = 'ADD TO DIARY';
  vm.diarySpinner = false;
  vm.hour = '1.00';
  vm.hours;
  vm.placeid = $routeParams.placeid || null;
  vm.photoref = $routeParams.photoref || null;
  vm.result;
  vm.starRating = {int: [], dec: []};
  vm.user;

  vm.addToDiary = addToDiary;
  
  (function init() {
    console.log(vm.placeid, vm.photoref);
    vm.dates = datetimeHelperService.getNextWeek();
    vm.hours = datetimeHelperService.getHours();
    getDetails(vm.placeid, vm.photoref);
    vm.user = localStorageService.getUser();
  })()

  // Implementation

  function getDetails(placeid, photoref) {
    googleApiService
      .getDetails(placeid, photoref)
      .then(result => {
        console.log({result});
        vm.result = helperService.formatHours(helperService.formatTags(result)[0]);
        vm.starRating = helperService.createStarRating(result.rating);
        console.log({result});
      })
      .catch(err => console.log({ err }));  
  }

  function addToDiary() {
    const datetime = datetimeHelperService.getDatetime(vm.date, vm.hour, vm.amPm);
    const location = helperService.editResult(vm.result);

    if (!vm.added && vm.user.displayName && location && datetime) {
      vm.diarySpinner = true;
      diaryService.addToDiary(vm.user, location, datetime)
        .then(res => {
          vm.diarySpinner = false; 
          vm.diaryBtnLabel = 'REMOVE FROM DIARY';
          vm.added = true;
        })
        .catch(e => {
          vm.diarySpinner = false; 
          console.log(e);
        })
    }

  }

}

pathFinderApp.controller('DetailCtrl', [
  '$routeParams', 
  'datetimeHelperService',
  'diaryService',
  'googleApiService', 
  'helperService',
  'localStorageService',
  DetailCtrl
]);